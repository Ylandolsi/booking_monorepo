services:
  # web:
  #   depends_on:
  #     web-api:
  #       condition: service_started # todo : make it service_healthy and add health check to web api
  #   build: ./frontend
  #   ports:
  #     - 3000:3000
  #   environment:
  #     VITE_API_BASE_URL: ${VITE_API_BASE_URL}
  #   develop:
  #     watch:
  #       - path: ./frontend/package.json
  #         action: rebuild
  #       - path: ./frontend/package-lock.json
  #         action: rebuild
  #       - path: ./frontend
  #         target: /app
  #         action: sync
  web-api:
    image: ${DOCKER_REGISTRY-}webapi
    container_name: web-api
    build:
      context: ./backend/Booking
      dockerfile: src/Api/Booking.Api/Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
      seq:
        condition: service_started
    restart: always
    ports:
      - 5000:8080
      - 5001:8081
    env_file:
      - .env
    environment:
      - ASPNETCORE_ENVIRONMENT=Development

  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      - POSTGRES_DB=clean-architecture
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d clean-architecture"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

  seq:
    image: datalust/seq:2024.3
    container_name: seq
    environment:
      - ACCEPT_EULA=Y
    ports:
      - 8081:80
    restart: always

  booking.redis:
    image: redis:latest
    restart: always
    ports:
      - "6379:6379"

    # For local development: Papercut simulates an SMTP server without sending real emails.
    # View email inbox on port 8080. Commented out for now.
    # papercut:
    #   image: changemakerstudiosus/papercut-smtp:latest
    #   container_name: papercut
    #   ports:
    #     - 8080:80
    #     - 25:25

    # healthcheck:
    #   test:
    #     [
    #       "CMD",
    #       "wget",
    #       "--quiet",
    #       "--tries=1",
    #       "--spider",
    #       "http://localhost:8080/health",
    #     ]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 40s
    # develop:
    #   watch:
    #     - path: ./backend
    #       target: /app
    #       action: sync
    #     - path: ./backend/*.csproj
    #       action: rebuild

volumes:
  postgres_data:
