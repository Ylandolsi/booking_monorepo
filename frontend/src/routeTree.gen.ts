/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UnauthorizedRouteImport } from './routes/unauthorized'
import { Route as HomeRouteImport } from './routes/home'
import { Route as AuthRouteRouteImport } from './routes/auth/route'
import { Route as AppRouteRouteImport } from './routes/app/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AppIndexRouteImport } from './routes/app/index'
import { Route as TestImgRouteImport } from './routes/test/img'
import { Route as TestDashboardRouteImport } from './routes/test/dashboard'
import { Route as ErrorExpSimpleLoadingDemoRouteImport } from './routes/error-exp/simple-loading-demo'
import { Route as AuthResetPasswordRouteImport } from './routes/auth/reset-password'
import { Route as AuthRegisterRouteImport } from './routes/auth/register'
import { Route as AuthLoginRouteImport } from './routes/auth/login'
import { Route as AuthForgotPasswordRouteImport } from './routes/auth/forgot-password'
import { Route as AuthEmailVerifiedRouteImport } from './routes/auth/email-verified'
import { Route as AuthEmailVerificationRouteImport } from './routes/auth/email-verification'
import { Route as AppStoreRouteImport } from './routes/app/store'
import { Route as AppSetupRouteImport } from './routes/app/setup'
import { Route as AppPayoutsRouteImport } from './routes/app/payouts'
import { Route as AppMeetsRouteImport } from './routes/app/meets'
import { Route as AppLinkiRouteImport } from './routes/app/linki'
import { Route as AppIntegrationRouteImport } from './routes/app/integration'
import { Route as AppStoreSetupRouteImport } from './routes/app/store.setup'
import { Route as AppProfileUserSlugRouteImport } from './routes/app/profile.$userSlug'
import { Route as AppMentorSetScheduleRouteImport } from './routes/app/mentor/set-schedule'
import { Route as AppMentorBecomeRouteImport } from './routes/app/mentor/become'
import { Route as AppAdminPayoutRequestsRouteImport } from './routes/app/admin/payout-requests'
import { Route as AppBookingSessionMentorSlugRouteImport } from './routes/app/booking/session.$mentorSlug'
import { Route as AppAdminPayoutRequestsRequestIdRouteImport } from './routes/app/admin/payout-requests.$requestId'

const UnauthorizedRoute = UnauthorizedRouteImport.update({
  id: '/unauthorized',
  path: '/unauthorized',
  getParentRoute: () => rootRouteImport,
} as any)
const HomeRoute = HomeRouteImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRouteRoute = AuthRouteRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const AppRouteRoute = AppRouteRouteImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AppIndexRoute = AppIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRouteRoute,
} as any)
const TestImgRoute = TestImgRouteImport.update({
  id: '/test/img',
  path: '/test/img',
  getParentRoute: () => rootRouteImport,
} as any)
const TestDashboardRoute = TestDashboardRouteImport.update({
  id: '/test/dashboard',
  path: '/test/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const ErrorExpSimpleLoadingDemoRoute =
  ErrorExpSimpleLoadingDemoRouteImport.update({
    id: '/error-exp/simple-loading-demo',
    path: '/error-exp/simple-loading-demo',
    getParentRoute: () => rootRouteImport,
  } as any)
const AuthResetPasswordRoute = AuthResetPasswordRouteImport.update({
  id: '/reset-password',
  path: '/reset-password',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AuthRegisterRoute = AuthRegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AuthForgotPasswordRoute = AuthForgotPasswordRouteImport.update({
  id: '/forgot-password',
  path: '/forgot-password',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AuthEmailVerifiedRoute = AuthEmailVerifiedRouteImport.update({
  id: '/email-verified',
  path: '/email-verified',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AuthEmailVerificationRoute = AuthEmailVerificationRouteImport.update({
  id: '/email-verification',
  path: '/email-verification',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AppStoreRoute = AppStoreRouteImport.update({
  id: '/store',
  path: '/store',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppSetupRoute = AppSetupRouteImport.update({
  id: '/setup',
  path: '/setup',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppPayoutsRoute = AppPayoutsRouteImport.update({
  id: '/payouts',
  path: '/payouts',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppMeetsRoute = AppMeetsRouteImport.update({
  id: '/meets',
  path: '/meets',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppLinkiRoute = AppLinkiRouteImport.update({
  id: '/linki',
  path: '/linki',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppIntegrationRoute = AppIntegrationRouteImport.update({
  id: '/integration',
  path: '/integration',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppStoreSetupRoute = AppStoreSetupRouteImport.update({
  id: '/setup',
  path: '/setup',
  getParentRoute: () => AppStoreRoute,
} as any)
const AppProfileUserSlugRoute = AppProfileUserSlugRouteImport.update({
  id: '/profile/$userSlug',
  path: '/profile/$userSlug',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppMentorSetScheduleRoute = AppMentorSetScheduleRouteImport.update({
  id: '/mentor/set-schedule',
  path: '/mentor/set-schedule',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppMentorBecomeRoute = AppMentorBecomeRouteImport.update({
  id: '/mentor/become',
  path: '/mentor/become',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppAdminPayoutRequestsRoute = AppAdminPayoutRequestsRouteImport.update({
  id: '/admin/payout-requests',
  path: '/admin/payout-requests',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppBookingSessionMentorSlugRoute =
  AppBookingSessionMentorSlugRouteImport.update({
    id: '/booking/session/$mentorSlug',
    path: '/booking/session/$mentorSlug',
    getParentRoute: () => AppRouteRoute,
  } as any)
const AppAdminPayoutRequestsRequestIdRoute =
  AppAdminPayoutRequestsRequestIdRouteImport.update({
    id: '/$requestId',
    path: '/$requestId',
    getParentRoute: () => AppAdminPayoutRequestsRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/app': typeof AppRouteRouteWithChildren
  '/auth': typeof AuthRouteRouteWithChildren
  '/home': typeof HomeRoute
  '/unauthorized': typeof UnauthorizedRoute
  '/app/integration': typeof AppIntegrationRoute
  '/app/linki': typeof AppLinkiRoute
  '/app/meets': typeof AppMeetsRoute
  '/app/payouts': typeof AppPayoutsRoute
  '/app/setup': typeof AppSetupRoute
  '/app/store': typeof AppStoreRouteWithChildren
  '/auth/email-verification': typeof AuthEmailVerificationRoute
  '/auth/email-verified': typeof AuthEmailVerifiedRoute
  '/auth/forgot-password': typeof AuthForgotPasswordRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/auth/reset-password': typeof AuthResetPasswordRoute
  '/error-exp/simple-loading-demo': typeof ErrorExpSimpleLoadingDemoRoute
  '/test/dashboard': typeof TestDashboardRoute
  '/test/img': typeof TestImgRoute
  '/app/': typeof AppIndexRoute
  '/app/admin/payout-requests': typeof AppAdminPayoutRequestsRouteWithChildren
  '/app/mentor/become': typeof AppMentorBecomeRoute
  '/app/mentor/set-schedule': typeof AppMentorSetScheduleRoute
  '/app/profile/$userSlug': typeof AppProfileUserSlugRoute
  '/app/store/setup': typeof AppStoreSetupRoute
  '/app/admin/payout-requests/$requestId': typeof AppAdminPayoutRequestsRequestIdRoute
  '/app/booking/session/$mentorSlug': typeof AppBookingSessionMentorSlugRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth': typeof AuthRouteRouteWithChildren
  '/home': typeof HomeRoute
  '/unauthorized': typeof UnauthorizedRoute
  '/app/integration': typeof AppIntegrationRoute
  '/app/linki': typeof AppLinkiRoute
  '/app/meets': typeof AppMeetsRoute
  '/app/payouts': typeof AppPayoutsRoute
  '/app/setup': typeof AppSetupRoute
  '/app/store': typeof AppStoreRouteWithChildren
  '/auth/email-verification': typeof AuthEmailVerificationRoute
  '/auth/email-verified': typeof AuthEmailVerifiedRoute
  '/auth/forgot-password': typeof AuthForgotPasswordRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/auth/reset-password': typeof AuthResetPasswordRoute
  '/error-exp/simple-loading-demo': typeof ErrorExpSimpleLoadingDemoRoute
  '/test/dashboard': typeof TestDashboardRoute
  '/test/img': typeof TestImgRoute
  '/app': typeof AppIndexRoute
  '/app/admin/payout-requests': typeof AppAdminPayoutRequestsRouteWithChildren
  '/app/mentor/become': typeof AppMentorBecomeRoute
  '/app/mentor/set-schedule': typeof AppMentorSetScheduleRoute
  '/app/profile/$userSlug': typeof AppProfileUserSlugRoute
  '/app/store/setup': typeof AppStoreSetupRoute
  '/app/admin/payout-requests/$requestId': typeof AppAdminPayoutRequestsRequestIdRoute
  '/app/booking/session/$mentorSlug': typeof AppBookingSessionMentorSlugRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/app': typeof AppRouteRouteWithChildren
  '/auth': typeof AuthRouteRouteWithChildren
  '/home': typeof HomeRoute
  '/unauthorized': typeof UnauthorizedRoute
  '/app/integration': typeof AppIntegrationRoute
  '/app/linki': typeof AppLinkiRoute
  '/app/meets': typeof AppMeetsRoute
  '/app/payouts': typeof AppPayoutsRoute
  '/app/setup': typeof AppSetupRoute
  '/app/store': typeof AppStoreRouteWithChildren
  '/auth/email-verification': typeof AuthEmailVerificationRoute
  '/auth/email-verified': typeof AuthEmailVerifiedRoute
  '/auth/forgot-password': typeof AuthForgotPasswordRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/auth/reset-password': typeof AuthResetPasswordRoute
  '/error-exp/simple-loading-demo': typeof ErrorExpSimpleLoadingDemoRoute
  '/test/dashboard': typeof TestDashboardRoute
  '/test/img': typeof TestImgRoute
  '/app/': typeof AppIndexRoute
  '/app/admin/payout-requests': typeof AppAdminPayoutRequestsRouteWithChildren
  '/app/mentor/become': typeof AppMentorBecomeRoute
  '/app/mentor/set-schedule': typeof AppMentorSetScheduleRoute
  '/app/profile/$userSlug': typeof AppProfileUserSlugRoute
  '/app/store/setup': typeof AppStoreSetupRoute
  '/app/admin/payout-requests/$requestId': typeof AppAdminPayoutRequestsRequestIdRoute
  '/app/booking/session/$mentorSlug': typeof AppBookingSessionMentorSlugRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/app'
    | '/auth'
    | '/home'
    | '/unauthorized'
    | '/app/integration'
    | '/app/linki'
    | '/app/meets'
    | '/app/payouts'
    | '/app/setup'
    | '/app/store'
    | '/auth/email-verification'
    | '/auth/email-verified'
    | '/auth/forgot-password'
    | '/auth/login'
    | '/auth/register'
    | '/auth/reset-password'
    | '/error-exp/simple-loading-demo'
    | '/test/dashboard'
    | '/test/img'
    | '/app/'
    | '/app/admin/payout-requests'
    | '/app/mentor/become'
    | '/app/mentor/set-schedule'
    | '/app/profile/$userSlug'
    | '/app/store/setup'
    | '/app/admin/payout-requests/$requestId'
    | '/app/booking/session/$mentorSlug'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth'
    | '/home'
    | '/unauthorized'
    | '/app/integration'
    | '/app/linki'
    | '/app/meets'
    | '/app/payouts'
    | '/app/setup'
    | '/app/store'
    | '/auth/email-verification'
    | '/auth/email-verified'
    | '/auth/forgot-password'
    | '/auth/login'
    | '/auth/register'
    | '/auth/reset-password'
    | '/error-exp/simple-loading-demo'
    | '/test/dashboard'
    | '/test/img'
    | '/app'
    | '/app/admin/payout-requests'
    | '/app/mentor/become'
    | '/app/mentor/set-schedule'
    | '/app/profile/$userSlug'
    | '/app/store/setup'
    | '/app/admin/payout-requests/$requestId'
    | '/app/booking/session/$mentorSlug'
  id:
    | '__root__'
    | '/'
    | '/app'
    | '/auth'
    | '/home'
    | '/unauthorized'
    | '/app/integration'
    | '/app/linki'
    | '/app/meets'
    | '/app/payouts'
    | '/app/setup'
    | '/app/store'
    | '/auth/email-verification'
    | '/auth/email-verified'
    | '/auth/forgot-password'
    | '/auth/login'
    | '/auth/register'
    | '/auth/reset-password'
    | '/error-exp/simple-loading-demo'
    | '/test/dashboard'
    | '/test/img'
    | '/app/'
    | '/app/admin/payout-requests'
    | '/app/mentor/become'
    | '/app/mentor/set-schedule'
    | '/app/profile/$userSlug'
    | '/app/store/setup'
    | '/app/admin/payout-requests/$requestId'
    | '/app/booking/session/$mentorSlug'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppRouteRoute: typeof AppRouteRouteWithChildren
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
  HomeRoute: typeof HomeRoute
  UnauthorizedRoute: typeof UnauthorizedRoute
  ErrorExpSimpleLoadingDemoRoute: typeof ErrorExpSimpleLoadingDemoRoute
  TestDashboardRoute: typeof TestDashboardRoute
  TestImgRoute: typeof TestImgRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/unauthorized': {
      id: '/unauthorized'
      path: '/unauthorized'
      fullPath: '/unauthorized'
      preLoaderRoute: typeof UnauthorizedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/home': {
      id: '/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app/': {
      id: '/app/'
      path: '/'
      fullPath: '/app/'
      preLoaderRoute: typeof AppIndexRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/test/img': {
      id: '/test/img'
      path: '/test/img'
      fullPath: '/test/img'
      preLoaderRoute: typeof TestImgRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/test/dashboard': {
      id: '/test/dashboard'
      path: '/test/dashboard'
      fullPath: '/test/dashboard'
      preLoaderRoute: typeof TestDashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/error-exp/simple-loading-demo': {
      id: '/error-exp/simple-loading-demo'
      path: '/error-exp/simple-loading-demo'
      fullPath: '/error-exp/simple-loading-demo'
      preLoaderRoute: typeof ErrorExpSimpleLoadingDemoRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/reset-password': {
      id: '/auth/reset-password'
      path: '/reset-password'
      fullPath: '/auth/reset-password'
      preLoaderRoute: typeof AuthResetPasswordRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/auth/register': {
      id: '/auth/register'
      path: '/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthRegisterRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/auth/forgot-password': {
      id: '/auth/forgot-password'
      path: '/forgot-password'
      fullPath: '/auth/forgot-password'
      preLoaderRoute: typeof AuthForgotPasswordRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/auth/email-verified': {
      id: '/auth/email-verified'
      path: '/email-verified'
      fullPath: '/auth/email-verified'
      preLoaderRoute: typeof AuthEmailVerifiedRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/auth/email-verification': {
      id: '/auth/email-verification'
      path: '/email-verification'
      fullPath: '/auth/email-verification'
      preLoaderRoute: typeof AuthEmailVerificationRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/app/store': {
      id: '/app/store'
      path: '/store'
      fullPath: '/app/store'
      preLoaderRoute: typeof AppStoreRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/app/setup': {
      id: '/app/setup'
      path: '/setup'
      fullPath: '/app/setup'
      preLoaderRoute: typeof AppSetupRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/app/payouts': {
      id: '/app/payouts'
      path: '/payouts'
      fullPath: '/app/payouts'
      preLoaderRoute: typeof AppPayoutsRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/app/meets': {
      id: '/app/meets'
      path: '/meets'
      fullPath: '/app/meets'
      preLoaderRoute: typeof AppMeetsRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/app/linki': {
      id: '/app/linki'
      path: '/linki'
      fullPath: '/app/linki'
      preLoaderRoute: typeof AppLinkiRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/app/integration': {
      id: '/app/integration'
      path: '/integration'
      fullPath: '/app/integration'
      preLoaderRoute: typeof AppIntegrationRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/app/store/setup': {
      id: '/app/store/setup'
      path: '/setup'
      fullPath: '/app/store/setup'
      preLoaderRoute: typeof AppStoreSetupRouteImport
      parentRoute: typeof AppStoreRoute
    }
    '/app/profile/$userSlug': {
      id: '/app/profile/$userSlug'
      path: '/profile/$userSlug'
      fullPath: '/app/profile/$userSlug'
      preLoaderRoute: typeof AppProfileUserSlugRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/app/mentor/set-schedule': {
      id: '/app/mentor/set-schedule'
      path: '/mentor/set-schedule'
      fullPath: '/app/mentor/set-schedule'
      preLoaderRoute: typeof AppMentorSetScheduleRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/app/mentor/become': {
      id: '/app/mentor/become'
      path: '/mentor/become'
      fullPath: '/app/mentor/become'
      preLoaderRoute: typeof AppMentorBecomeRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/app/admin/payout-requests': {
      id: '/app/admin/payout-requests'
      path: '/admin/payout-requests'
      fullPath: '/app/admin/payout-requests'
      preLoaderRoute: typeof AppAdminPayoutRequestsRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/app/booking/session/$mentorSlug': {
      id: '/app/booking/session/$mentorSlug'
      path: '/booking/session/$mentorSlug'
      fullPath: '/app/booking/session/$mentorSlug'
      preLoaderRoute: typeof AppBookingSessionMentorSlugRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/app/admin/payout-requests/$requestId': {
      id: '/app/admin/payout-requests/$requestId'
      path: '/$requestId'
      fullPath: '/app/admin/payout-requests/$requestId'
      preLoaderRoute: typeof AppAdminPayoutRequestsRequestIdRouteImport
      parentRoute: typeof AppAdminPayoutRequestsRoute
    }
  }
}

interface AppStoreRouteChildren {
  AppStoreSetupRoute: typeof AppStoreSetupRoute
}

const AppStoreRouteChildren: AppStoreRouteChildren = {
  AppStoreSetupRoute: AppStoreSetupRoute,
}

const AppStoreRouteWithChildren = AppStoreRoute._addFileChildren(
  AppStoreRouteChildren,
)

interface AppAdminPayoutRequestsRouteChildren {
  AppAdminPayoutRequestsRequestIdRoute: typeof AppAdminPayoutRequestsRequestIdRoute
}

const AppAdminPayoutRequestsRouteChildren: AppAdminPayoutRequestsRouteChildren =
  {
    AppAdminPayoutRequestsRequestIdRoute: AppAdminPayoutRequestsRequestIdRoute,
  }

const AppAdminPayoutRequestsRouteWithChildren =
  AppAdminPayoutRequestsRoute._addFileChildren(
    AppAdminPayoutRequestsRouteChildren,
  )

interface AppRouteRouteChildren {
  AppIntegrationRoute: typeof AppIntegrationRoute
  AppLinkiRoute: typeof AppLinkiRoute
  AppMeetsRoute: typeof AppMeetsRoute
  AppPayoutsRoute: typeof AppPayoutsRoute
  AppSetupRoute: typeof AppSetupRoute
  AppStoreRoute: typeof AppStoreRouteWithChildren
  AppIndexRoute: typeof AppIndexRoute
  AppAdminPayoutRequestsRoute: typeof AppAdminPayoutRequestsRouteWithChildren
  AppMentorBecomeRoute: typeof AppMentorBecomeRoute
  AppMentorSetScheduleRoute: typeof AppMentorSetScheduleRoute
  AppProfileUserSlugRoute: typeof AppProfileUserSlugRoute
  AppBookingSessionMentorSlugRoute: typeof AppBookingSessionMentorSlugRoute
}

const AppRouteRouteChildren: AppRouteRouteChildren = {
  AppIntegrationRoute: AppIntegrationRoute,
  AppLinkiRoute: AppLinkiRoute,
  AppMeetsRoute: AppMeetsRoute,
  AppPayoutsRoute: AppPayoutsRoute,
  AppSetupRoute: AppSetupRoute,
  AppStoreRoute: AppStoreRouteWithChildren,
  AppIndexRoute: AppIndexRoute,
  AppAdminPayoutRequestsRoute: AppAdminPayoutRequestsRouteWithChildren,
  AppMentorBecomeRoute: AppMentorBecomeRoute,
  AppMentorSetScheduleRoute: AppMentorSetScheduleRoute,
  AppProfileUserSlugRoute: AppProfileUserSlugRoute,
  AppBookingSessionMentorSlugRoute: AppBookingSessionMentorSlugRoute,
}

const AppRouteRouteWithChildren = AppRouteRoute._addFileChildren(
  AppRouteRouteChildren,
)

interface AuthRouteRouteChildren {
  AuthEmailVerificationRoute: typeof AuthEmailVerificationRoute
  AuthEmailVerifiedRoute: typeof AuthEmailVerifiedRoute
  AuthForgotPasswordRoute: typeof AuthForgotPasswordRoute
  AuthLoginRoute: typeof AuthLoginRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
  AuthResetPasswordRoute: typeof AuthResetPasswordRoute
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthEmailVerificationRoute: AuthEmailVerificationRoute,
  AuthEmailVerifiedRoute: AuthEmailVerifiedRoute,
  AuthForgotPasswordRoute: AuthForgotPasswordRoute,
  AuthLoginRoute: AuthLoginRoute,
  AuthRegisterRoute: AuthRegisterRoute,
  AuthResetPasswordRoute: AuthResetPasswordRoute,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRouteRoute: AppRouteRouteWithChildren,
  AuthRouteRoute: AuthRouteRouteWithChildren,
  HomeRoute: HomeRoute,
  UnauthorizedRoute: UnauthorizedRoute,
  ErrorExpSimpleLoadingDemoRoute: ErrorExpSimpleLoadingDemoRoute,
  TestDashboardRoute: TestDashboardRoute,
  TestImgRoute: TestImgRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
