// <auto-generated />
using System;
using Booking.Modules.Catalog.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Booking.Modules.Catalog.Persistence.Migrations
{
    [DbContext(typeof(CatalogDbContext))]
    [Migration("20251005130410_ProdcutSlugForOrder")]
    partial class ProdcutSlugForOrder
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("catalog")
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Booking.Modules.Catalog.Domain.Entities.Day", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("integer")
                        .HasColumnName("day_of_week");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("ProductSlug")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("product_slug");

                    b.Property<int?>("SessionProductId")
                        .HasColumnType("integer")
                        .HasColumnName("session_product_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_days");

                    b.HasIndex("SessionProductId")
                        .HasDatabaseName("ix_days_session_product_id");

                    b.ToTable("days", "catalog");
                });

            modelBuilder.Entity("Booking.Modules.Catalog.Domain.Entities.Escrow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer")
                        .HasColumnName("order_id");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("price");

                    b.Property<DateTime>("ReleaseAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("release_at");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_escrows");

                    b.HasIndex("OrderId")
                        .IsUnique()
                        .HasDatabaseName("ix_escrows_order_id");

                    b.ToTable("escrows", "catalog");
                });

            modelBuilder.Entity("Booking.Modules.Catalog.Domain.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("amount");

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("numeric")
                        .HasColumnName("amount_paid");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("character varying(320)")
                        .HasColumnName("customer_email");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("customer_name");

                    b.Property<string>("CustomerPhone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("customer_phone");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("note");

                    b.Property<string>("PaymentRef")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("payment_ref");

                    b.Property<string>("PaymentUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("payment_url");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    b.Property<string>("ProductSlug")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("product_slug");

                    b.Property<string>("ProductType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("product_type");

                    b.Property<DateTime?>("ScheduledAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("scheduled_at");

                    b.Property<DateTime?>("SessionEndTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("session_end_time");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<int>("StoreId")
                        .HasColumnType("integer")
                        .HasColumnName("store_id");

                    b.Property<string>("StoreSlug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("store_slug");

                    b.Property<string>("TimeZoneId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("time_zone_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_orders");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_orders_product_id");

                    b.HasIndex("StoreId")
                        .HasDatabaseName("ix_orders_store_id");

                    b.ToTable("orders", "catalog");
                });

            modelBuilder.Entity("Booking.Modules.Catalog.Domain.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer")
                        .HasColumnName("order_id");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("price");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("reference");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int>("StoreId")
                        .HasColumnType("integer")
                        .HasColumnName("store_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_payments");

                    b.HasIndex("Reference")
                        .IsUnique()
                        .HasDatabaseName("ix_payments_reference");

                    b.HasIndex("StoreId")
                        .HasDatabaseName("ix_payments_store_id");

                    b.ToTable("payments", "catalog");
                });

            modelBuilder.Entity("Booking.Modules.Catalog.Domain.Entities.Payout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("KonnectWalletId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("konnect_wallet_id");

                    b.Property<string>("PaymentRef")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("payment_ref");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<int>("StoreId")
                        .HasColumnType("integer")
                        .HasColumnName("store_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("WalletId")
                        .HasColumnType("integer")
                        .HasColumnName("wallet_id");

                    b.HasKey("Id")
                        .HasName("pk_payouts");

                    b.HasIndex("StoreId")
                        .HasDatabaseName("ix_payouts_store_id");

                    b.ToTable("payouts", "catalog");
                });

            modelBuilder.Entity("Booking.Modules.Catalog.Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClickToPay")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("click_to_pay");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("description");

                    b.Property<int>("DisplayOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("display_order");

                    b.Property<bool>("IsPublished")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_published");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("price");

                    b.Property<string>("ProductSlug")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("product_slug");

                    b.Property<string>("ProductType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("product_type");

                    b.Property<int>("StoreId")
                        .HasColumnType("integer")
                        .HasColumnName("store_id");

                    b.Property<string>("StoreSlug")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("store_slug");

                    b.Property<string>("Subtitle")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("subtitle");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("StoreId")
                        .HasDatabaseName("ix_products_store_id");

                    b.ToTable("products", "catalog");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Booking.Modules.Catalog.Domain.Entities.Sessions.BookedSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("numeric")
                        .HasColumnName("amount_paid");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_at");

                    b.Property<DateTime?>("ConfirmedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("confirmed_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("Duration")
                        .HasColumnType("integer")
                        .HasColumnName("duration");

                    b.Property<DateTime>("EndsAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ends_at");

                    b.Property<string>("MeetLink")
                        .HasColumnType("text")
                        .HasColumnName("meet_link");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    b.Property<string>("ProductSlug")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("product_slug");

                    b.Property<DateTime>("ScheduledAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("scheduled_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<int>("StoreId")
                        .HasColumnType("integer")
                        .HasColumnName("store_id");

                    b.Property<string>("StoreSlug")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("store_slug");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_booked_sessions");

                    b.ToTable("booked_sessions", "catalog");
                });

            modelBuilder.Entity("Booking.Modules.Catalog.Domain.Entities.Sessions.SessionAvailability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("DayId")
                        .HasColumnType("integer")
                        .HasColumnName("day_id");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("integer")
                        .HasColumnName("day_of_week");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<int>("SessionProductId")
                        .HasColumnType("integer")
                        .HasColumnName("session_product_id");

                    b.Property<string>("SessionProductSlug")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("session_product_slug");

                    b.Property<string>("TimeZoneId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("time_zone_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_session_availabilities");

                    b.HasIndex("DayId")
                        .HasDatabaseName("ix_session_availabilities_day_id");

                    b.HasIndex("SessionProductId")
                        .HasDatabaseName("ix_session_availabilities_session_product_id");

                    b.ToTable("session_availabilities", "catalog");
                });

            modelBuilder.Entity("Booking.Modules.Catalog.Domain.Entities.Store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<bool>("IsPublished")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_published");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("slug");

                    b.Property<string>("SocialLinks")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("social_links");

                    b.Property<int>("Step")
                        .HasColumnType("integer")
                        .HasColumnName("step");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_stores");

                    b.ToTable("stores", "catalog");
                });

            modelBuilder.Entity("Booking.Modules.Catalog.Domain.Entities.Wallet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric")
                        .HasColumnName("balance");

                    b.Property<decimal>("PendingBalance")
                        .HasColumnType("numeric")
                        .HasColumnName("pending_balance");

                    b.Property<int>("StoreId")
                        .HasColumnType("integer")
                        .HasColumnName("store_id");

                    b.HasKey("Id")
                        .HasName("pk_wallets");

                    b.ToTable("wallets", "catalog");
                });

            modelBuilder.Entity("Booking.Modules.Catalog.Domain.Entities.Sessions.SessionProduct", b =>
                {
                    b.HasBaseType("Booking.Modules.Catalog.Domain.Entities.Product");

                    b.Property<int>("BufferTime")
                        .HasColumnType("integer")
                        .HasColumnName("buffer_time_minutes");

                    b.Property<int>("Duration")
                        .HasColumnType("integer")
                        .HasColumnName("duration_minutes");

                    b.Property<string>("MeetingInstructions")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("meeting_instructions");

                    b.Property<string>("TimeZoneId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("Africa/Tunis")
                        .HasColumnName("time_zone_id");

                    b.ToTable("session_products", "catalog");
                });

            modelBuilder.Entity("Booking.Modules.Catalog.Domain.Entities.Day", b =>
                {
                    b.HasOne("Booking.Modules.Catalog.Domain.Entities.Sessions.SessionProduct", null)
                        .WithMany("Days")
                        .HasForeignKey("SessionProductId")
                        .HasConstraintName("fk_days_session_products_session_product_id");
                });

            modelBuilder.Entity("Booking.Modules.Catalog.Domain.Entities.Escrow", b =>
                {
                    b.HasOne("Booking.Modules.Catalog.Domain.Entities.Order", "Order")
                        .WithOne("Escrow")
                        .HasForeignKey("Booking.Modules.Catalog.Domain.Entities.Escrow", "OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_escrows_orders_order_id");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Booking.Modules.Catalog.Domain.Entities.Order", b =>
                {
                    b.HasOne("Booking.Modules.Catalog.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_orders_products_product_id");

                    b.HasOne("Booking.Modules.Catalog.Domain.Entities.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_orders_stores_store_id");

                    b.Navigation("Product");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Booking.Modules.Catalog.Domain.Entities.Payment", b =>
                {
                    b.HasOne("Booking.Modules.Catalog.Domain.Entities.Store", "Store")
                        .WithMany("Payments")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_payments_stores_store_id");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Booking.Modules.Catalog.Domain.Entities.Payout", b =>
                {
                    b.HasOne("Booking.Modules.Catalog.Domain.Entities.Store", "Store")
                        .WithMany("Payouts")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_payouts_stores_store_id");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Booking.Modules.Catalog.Domain.Entities.Product", b =>
                {
                    b.HasOne("Booking.Modules.Catalog.Domain.Entities.Store", "Store")
                        .WithMany("Products")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_products_stores_store_id");

                    b.OwnsOne("Booking.Modules.Catalog.Domain.ValueObjects.Picture", "PreviewPicture", b1 =>
                        {
                            b1.Property<int>("ProductId")
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            b1.Property<string>("MainLink")
                                .IsRequired()
                                .HasMaxLength(2048)
                                .HasColumnType("character varying(2048)")
                                .HasColumnName("preview_picture_main_link");

                            b1.Property<string>("ThumbnailLink")
                                .IsRequired()
                                .HasMaxLength(2048)
                                .HasColumnType("character varying(2048)")
                                .HasColumnName("preview_picture_thumbnail_link");

                            b1.HasKey("ProductId");

                            b1.ToTable("products", "catalog");

                            b1.WithOwner()
                                .HasForeignKey("ProductId")
                                .HasConstraintName("fk_products_products_id");
                        });

                    b.OwnsOne("Booking.Modules.Catalog.Domain.ValueObjects.Picture", "ThumbnailPicture", b1 =>
                        {
                            b1.Property<int>("ProductId")
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            b1.Property<string>("MainLink")
                                .IsRequired()
                                .HasMaxLength(2048)
                                .HasColumnType("character varying(2048)")
                                .HasColumnName("thumbnail_picture_main_link");

                            b1.Property<string>("ThumbnailLink")
                                .IsRequired()
                                .HasMaxLength(2048)
                                .HasColumnType("character varying(2048)")
                                .HasColumnName("thumbnail_picture_thumbnail_link");

                            b1.HasKey("ProductId");

                            b1.ToTable("products", "catalog");

                            b1.WithOwner()
                                .HasForeignKey("ProductId")
                                .HasConstraintName("fk_products_products_id");
                        });

                    b.Navigation("PreviewPicture");

                    b.Navigation("Store");

                    b.Navigation("ThumbnailPicture");
                });

            modelBuilder.Entity("Booking.Modules.Catalog.Domain.Entities.Sessions.SessionAvailability", b =>
                {
                    b.HasOne("Booking.Modules.Catalog.Domain.Entities.Day", "Day")
                        .WithMany("Availabilities")
                        .HasForeignKey("DayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_session_availabilities_days_day_id");

                    b.HasOne("Booking.Modules.Catalog.Domain.Entities.Sessions.SessionProduct", "SessionProduct")
                        .WithMany("Availabilities")
                        .HasForeignKey("SessionProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_session_availabilities_session_products_session_product_id");

                    b.OwnsOne("Booking.Modules.Catalog.Domain.ValueObjects.TimeRange", "TimeRange", b1 =>
                        {
                            b1.Property<int>("SessionAvailabilityId")
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            b1.Property<TimeOnly>("EndTime")
                                .HasColumnType("time without time zone")
                                .HasColumnName("end_time");

                            b1.Property<TimeOnly>("StartTime")
                                .HasColumnType("time without time zone")
                                .HasColumnName("start_time");

                            b1.HasKey("SessionAvailabilityId");

                            b1.ToTable("session_availabilities", "catalog");

                            b1.WithOwner()
                                .HasForeignKey("SessionAvailabilityId")
                                .HasConstraintName("fk_session_availabilities_session_availabilities_id");
                        });

                    b.Navigation("Day");

                    b.Navigation("SessionProduct");

                    b.Navigation("TimeRange")
                        .IsRequired();
                });

            modelBuilder.Entity("Booking.Modules.Catalog.Domain.Entities.Store", b =>
                {
                    b.OwnsOne("Booking.Modules.Catalog.Domain.ValueObjects.Picture", "Picture", b1 =>
                        {
                            b1.Property<int>("StoreId")
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            b1.Property<string>("MainLink")
                                .IsRequired()
                                .HasMaxLength(2048)
                                .HasColumnType("character varying(2048)")
                                .HasColumnName("picture_main_link");

                            b1.Property<string>("ThumbnailLink")
                                .IsRequired()
                                .HasMaxLength(2048)
                                .HasColumnType("character varying(2048)")
                                .HasColumnName("picture_thumbnail_link");

                            b1.HasKey("StoreId");

                            b1.ToTable("stores", "catalog");

                            b1.WithOwner()
                                .HasForeignKey("StoreId")
                                .HasConstraintName("fk_stores_stores_id");
                        });

                    b.Navigation("Picture")
                        .IsRequired();
                });

            modelBuilder.Entity("Booking.Modules.Catalog.Domain.Entities.Sessions.SessionProduct", b =>
                {
                    b.HasOne("Booking.Modules.Catalog.Domain.Entities.Product", null)
                        .WithOne()
                        .HasForeignKey("Booking.Modules.Catalog.Domain.Entities.Sessions.SessionProduct", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_session_products_products_id");
                });

            modelBuilder.Entity("Booking.Modules.Catalog.Domain.Entities.Day", b =>
                {
                    b.Navigation("Availabilities");
                });

            modelBuilder.Entity("Booking.Modules.Catalog.Domain.Entities.Order", b =>
                {
                    b.Navigation("Escrow")
                        .IsRequired();
                });

            modelBuilder.Entity("Booking.Modules.Catalog.Domain.Entities.Store", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("Payouts");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Booking.Modules.Catalog.Domain.Entities.Sessions.SessionProduct", b =>
                {
                    b.Navigation("Availabilities");

                    b.Navigation("Days");
                });
#pragma warning restore 612, 618
        }
    }
}
