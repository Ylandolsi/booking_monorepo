// <auto-generated />
using System;
using Booking.Modules.Mentorships.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Booking.Modules.Mentorships.Persistence.Migrations
{
    [DbContext(typeof(MentorshipsDbContext))]
    [Migration("20250812080556_CreateDaysInitially")]
    partial class CreateDaysInitially
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("mentorships")
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Booking.Common.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<string>("Error")
                        .HasColumnType("text")
                        .HasColumnName("error");

                    b.Property<DateTime>("OccurredOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occurred_on_utc");

                    b.Property<DateTime?>("ProcessedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_on_utc");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_outbox_messages");

                    b.ToTable("outbox_messages", "mentorships");
                });

            modelBuilder.Entity("Booking.Modules.Mentorships.Domain.Entities.Availability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("DayId")
                        .HasColumnType("integer")
                        .HasColumnName("day_id");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("integer")
                        .HasColumnName("day_of_week");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<int>("MentorId")
                        .HasColumnType("integer")
                        .HasColumnName("mentor_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_availabilities");

                    b.HasIndex("DayId")
                        .HasDatabaseName("ix_availabilities_day_id");

                    b.HasIndex("DayOfWeek")
                        .HasDatabaseName("ix_availabilities_day_of_week");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("ix_availabilities_is_active");

                    b.HasIndex("MentorId")
                        .HasDatabaseName("ix_availabilities_mentor_id");

                    b.ToTable("availabilities", "mentorships");
                });

            modelBuilder.Entity("Booking.Modules.Mentorships.Domain.Entities.Day", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("integer")
                        .HasColumnName("day_of_week");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<int>("MentorId")
                        .HasColumnType("integer")
                        .HasColumnName("mentor_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_days");

                    b.HasIndex("DayOfWeek")
                        .HasDatabaseName("ix_days_day_of_week");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("ix_days_is_active");

                    b.HasIndex("MentorId")
                        .HasDatabaseName("ix_days_mentor_id");

                    b.HasIndex("MentorId", "DayOfWeek")
                        .IsUnique()
                        .HasDatabaseName("ix_days_mentor_id_day_of_week");

                    b.ToTable("days", "mentorships");
                });

            modelBuilder.Entity("Booking.Modules.Mentorships.Domain.Entities.Mentor", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("LastActiveAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_active_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserSlug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("user_slug");

                    b.HasKey("Id")
                        .HasName("pk_mentors");

                    b.ToTable("mentors", "mentorships");
                });

            modelBuilder.Entity("Booking.Modules.Mentorships.Domain.Entities.MentorshipRelationship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("LastSessionAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_session_at");

                    b.Property<int>("MenteeId")
                        .HasColumnType("integer")
                        .HasColumnName("mentee_id");

                    b.Property<int>("MentorId")
                        .HasColumnType("integer")
                        .HasColumnName("mentor_id");

                    b.Property<int>("SessionCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("session_count");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_at");

                    b.Property<decimal>("TotalSpent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("total_spent");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_mentorship_relationships");

                    b.HasIndex("MenteeId")
                        .HasDatabaseName("ix_mentorship_relationships_mentee_id");

                    b.HasIndex("MentorId")
                        .HasDatabaseName("ix_mentorship_relationships_mentor_id");

                    b.HasIndex("MentorId", "MenteeId")
                        .IsUnique()
                        .HasDatabaseName("ix_mentorship_relationships_mentor_id_mentee_id");

                    b.ToTable("mentorship_relationships", "mentorships");
                });

            modelBuilder.Entity("Booking.Modules.Mentorships.Domain.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("comment");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("MenteeId")
                        .HasColumnType("integer")
                        .HasColumnName("mentee_id");

                    b.Property<int>("MentorId")
                        .HasColumnType("integer")
                        .HasColumnName("mentor_id");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.Property<int>("SessionId")
                        .HasColumnType("integer")
                        .HasColumnName("session_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_reviews");

                    b.HasIndex("MenteeId")
                        .HasDatabaseName("ix_reviews_mentee_id");

                    b.HasIndex("MentorId")
                        .HasDatabaseName("ix_reviews_mentor_id");

                    b.HasIndex("SessionId")
                        .IsUnique()
                        .HasDatabaseName("ix_reviews_session_id");

                    b.ToTable("reviews", "mentorships");
                });

            modelBuilder.Entity("Booking.Modules.Mentorships.Domain.Entities.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CancelledAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("cancelled_at");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_at");

                    b.Property<DateTime?>("ConfirmedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("confirmed_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("MenteeId")
                        .HasColumnType("integer")
                        .HasColumnName("mentee_id");

                    b.Property<int>("MentorId")
                        .HasColumnType("integer")
                        .HasColumnName("mentor_id");

                    b.Property<int?>("MentorshipRelationshipId")
                        .HasColumnType("integer")
                        .HasColumnName("mentorship_relationship_id");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("note");

                    b.Property<bool>("RescheduleRequested")
                        .HasColumnType("boolean")
                        .HasColumnName("reschedule_requested");

                    b.Property<DateTime>("ScheduledAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("scheduled_at");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_sessions");

                    b.HasIndex("MenteeId")
                        .HasDatabaseName("ix_sessions_mentee_id");

                    b.HasIndex("MentorId")
                        .HasDatabaseName("ix_sessions_mentor_id");

                    b.HasIndex("MentorshipRelationshipId")
                        .HasDatabaseName("ix_sessions_mentorship_relationship_id");

                    b.HasIndex("ScheduledAt")
                        .HasDatabaseName("ix_sessions_scheduled_at");

                    b.HasIndex("Status")
                        .HasDatabaseName("ix_sessions_status");

                    b.ToTable("sessions", "mentorships");
                });

            modelBuilder.Entity("Booking.Modules.Mentorships.Domain.Entities.Availability", b =>
                {
                    b.HasOne("Booking.Modules.Mentorships.Domain.Entities.Day", "Day")
                        .WithMany("Availabilities")
                        .HasForeignKey("DayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_availabilities_days_day_id");

                    b.HasOne("Booking.Modules.Mentorships.Domain.Entities.Mentor", "Mentor")
                        .WithMany("Availabilities")
                        .HasForeignKey("MentorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_availabilities_mentors_mentor_id");

                    b.OwnsOne("Booking.Modules.Mentorships.Domain.ValueObjects.TimeRange", "TimeRange", b1 =>
                        {
                            b1.Property<int>("AvailabilityId")
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            b1.Property<int>("EndHour")
                                .HasColumnType("integer")
                                .HasColumnName("end_hour");

                            b1.Property<int>("EndMinute")
                                .HasColumnType("integer")
                                .HasColumnName("time_range_end_minute");

                            b1.Property<int>("StartHour")
                                .HasColumnType("integer")
                                .HasColumnName("start_hour");

                            b1.Property<int>("StartMinute")
                                .HasColumnType("integer")
                                .HasColumnName("time_range_start_minute");

                            b1.HasKey("AvailabilityId");

                            b1.ToTable("availabilities", "mentorships");

                            b1.WithOwner()
                                .HasForeignKey("AvailabilityId")
                                .HasConstraintName("fk_availabilities_availabilities_id");
                        });

                    b.Navigation("Day");

                    b.Navigation("Mentor");

                    b.Navigation("TimeRange")
                        .IsRequired();
                });

            modelBuilder.Entity("Booking.Modules.Mentorships.Domain.Entities.Day", b =>
                {
                    b.HasOne("Booking.Modules.Mentorships.Domain.Entities.Mentor", "Mentor")
                        .WithMany("Days")
                        .HasForeignKey("MentorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_days_mentors_mentor_id");

                    b.Navigation("Mentor");
                });

            modelBuilder.Entity("Booking.Modules.Mentorships.Domain.Entities.Mentor", b =>
                {
                    b.OwnsOne("Booking.Modules.Mentorships.Domain.ValueObjects.Duration", "BufferTime", b1 =>
                        {
                            b1.Property<int>("MentorId")
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            b1.Property<int>("Minutes")
                                .HasColumnType("integer")
                                .HasColumnName("buffer_time_minutes");

                            b1.HasKey("MentorId");

                            b1.ToTable("mentors", "mentorships");

                            b1.WithOwner()
                                .HasForeignKey("MentorId")
                                .HasConstraintName("fk_mentors_mentors_id");
                        });

                    b.OwnsOne("Booking.Modules.Mentorships.Domain.ValueObjects.HourlyRate", "HourlyRate", b1 =>
                        {
                            b1.Property<int>("MentorId")
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(10,2)")
                                .HasColumnName("hourly_rate_amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasColumnName("hourly_rate_currency");

                            b1.HasKey("MentorId");

                            b1.ToTable("mentors", "mentorships");

                            b1.WithOwner()
                                .HasForeignKey("MentorId")
                                .HasConstraintName("fk_mentors_mentors_id");
                        });

                    b.Navigation("BufferTime")
                        .IsRequired();

                    b.Navigation("HourlyRate")
                        .IsRequired();
                });

            modelBuilder.Entity("Booking.Modules.Mentorships.Domain.Entities.MentorshipRelationship", b =>
                {
                    b.HasOne("Booking.Modules.Mentorships.Domain.Entities.Mentor", "Mentor")
                        .WithMany("MentorshipRelationships")
                        .HasForeignKey("MentorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_mentorship_relationships_mentors_mentor_id");

                    b.Navigation("Mentor");
                });

            modelBuilder.Entity("Booking.Modules.Mentorships.Domain.Entities.Review", b =>
                {
                    b.HasOne("Booking.Modules.Mentorships.Domain.Entities.Mentor", null)
                        .WithMany("Reviews")
                        .HasForeignKey("MentorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reviews_mentors_mentor_id");

                    b.HasOne("Booking.Modules.Mentorships.Domain.Entities.Session", "Session")
                        .WithMany("Reviews")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reviews_sessions_session_id");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("Booking.Modules.Mentorships.Domain.Entities.Session", b =>
                {
                    b.HasOne("Booking.Modules.Mentorships.Domain.Entities.Mentor", "Mentor")
                        .WithMany("Sessions")
                        .HasForeignKey("MentorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_sessions_mentors_mentor_id");

                    b.HasOne("Booking.Modules.Mentorships.Domain.Entities.MentorshipRelationship", "MentorshipRelationship")
                        .WithMany("Sessions")
                        .HasForeignKey("MentorshipRelationshipId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_sessions_mentorship_relationships_mentorship_relationship_id");

                    b.OwnsOne("Booking.Modules.Mentorships.Domain.ValueObjects.Duration", "Duration", b1 =>
                        {
                            b1.Property<int>("SessionId")
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            b1.Property<int>("Minutes")
                                .HasColumnType("integer")
                                .HasColumnName("duration_minutes");

                            b1.HasKey("SessionId");

                            b1.ToTable("sessions", "mentorships");

                            b1.WithOwner()
                                .HasForeignKey("SessionId")
                                .HasConstraintName("fk_sessions_sessions_id");
                        });

                    b.OwnsOne("Booking.Modules.Mentorships.Domain.ValueObjects.GoogleMeetLink", "GoogleMeetLink", b1 =>
                        {
                            b1.Property<int>("SessionId")
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            b1.Property<string>("Url")
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)")
                                .HasColumnName("google_meet_url");

                            b1.HasKey("SessionId");

                            b1.ToTable("sessions", "mentorships");

                            b1.WithOwner()
                                .HasForeignKey("SessionId")
                                .HasConstraintName("fk_sessions_sessions_id");
                        });

                    b.OwnsOne("Booking.Modules.Mentorships.Domain.ValueObjects.Price", "Price", b1 =>
                        {
                            b1.Property<int>("SessionId")
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(10,2)")
                                .HasColumnName("price_amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasColumnName("price_currency");

                            b1.HasKey("SessionId");

                            b1.ToTable("sessions", "mentorships");

                            b1.WithOwner()
                                .HasForeignKey("SessionId")
                                .HasConstraintName("fk_sessions_sessions_id");
                        });

                    b.Navigation("Duration")
                        .IsRequired();

                    b.Navigation("GoogleMeetLink");

                    b.Navigation("Mentor");

                    b.Navigation("MentorshipRelationship");

                    b.Navigation("Price")
                        .IsRequired();
                });

            modelBuilder.Entity("Booking.Modules.Mentorships.Domain.Entities.Day", b =>
                {
                    b.Navigation("Availabilities");
                });

            modelBuilder.Entity("Booking.Modules.Mentorships.Domain.Entities.Mentor", b =>
                {
                    b.Navigation("Availabilities");

                    b.Navigation("Days");

                    b.Navigation("MentorshipRelationships");

                    b.Navigation("Reviews");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("Booking.Modules.Mentorships.Domain.Entities.MentorshipRelationship", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("Booking.Modules.Mentorships.Domain.Entities.Session", b =>
                {
                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
